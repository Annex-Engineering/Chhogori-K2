# This file has been created by "Trails" for the K2 Printer running 2x Fysetc S6s, board version 2.0, running TMC2209s
# XY Gantry = Release 2, Z Axis = 4 Belts, 15mm with 13.7:1 Gearboxes
# Please change settings for your specific build or ensure you place your items in the same spots on the same MCU as I have.
# I've added as many options as I can think of for different displays as well as listed the available commands you can use via the terminal at the bottom of this configuration file.

#How do I upgrade to the latest software?
#The general way to upgrade is to ssh into the Raspberry Pi and run:
#cd ~/klipper
#git pull
#~/klipper/scripts/install-octopi.sh

# Then one can recompile and flash the micro-controller code. For example:
#make menuconfig
#make clean
#make
#sudo service klipper stop
#make flash FLASH_DEVICE=vid:pid (where "vid:pid" is the device ID found using "lsusb")
#sudo service klipper start

# Obtaining your USB ID to flash with:
# disconnect all of the boards except the one you would like to flash
# type the "lsusb" command into the terminal
# note the USB ID (ex: "1d50:614e", vid and pid are each a 4 digit hex string)
# use the command above "make flash ...."

# This file contains common pin mappings for the Fysetc S6 board, version 1.2.
# To use this config, the firmware should be compiled for the STM32F446.
# When calling "menuconfig", enable "extra low-level configuration setup"
# and select the "12MHz crystal" as clock reference
# For flashing, write the compiled klipper.bin to memory location 0x08000000
# This address is applied automatically when you flash the board ^^^

#However, it's often the case that only the host software changes. In this case, one can update and restart just the host software with:
#cd ~/klipper
#git pull
#sudo service klipper restart
#If after using this shortcut the software warns about needing to reflash the micro-controller or some other unusual error occurs, then follow the full upgrade steps outlined above. Note that the RESTART and FIRMWARE_RESTART g-code commands do not load new software - the above "sudo service klipper restart" and "make flash" commands are needed for a software change to take effect.

# use the following modifiers before the pin definition (ex: ^!ar99)
# ! 			invert the logic
# ^ 			activate 5v pullup (does not apply to all pins)
# mcu_name: 	use pins on additional MCU (ex: z:ar10)


# MCU - Fysetc S6 #1
[mcu]
#	obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_3E0056000851363131363530-if00
restart_method: command

# MCU - Fysetc S6 #2
[mcu s62]
#	obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_2E002A000851363131363530-if00
restart_method: command

#virtual sdcard settings
#[virtual_sdcard]
#path: ~/.octoprint/uploads/


#Printer Controls
[printer]
kinematics: cartesian
max_velocity: 350
max_accel_to_decel: 12000
max_accel: 12000
max_z_velocity: 30
max_z_accel: 100
square_corner_velocity: 5.0

#Gcode G2/G3 Arc Support
[gcode_arcs]
resolution: 0.1

#Input Shaper Settings
[input_shaper]
shaper_freq_x: 59 #(100*8)/13.5
shaper_freq_y: 51 #(100*8)/15.75
shaper_type: mzv

# Steppers
[stepper_x]
# connected to X Stepper on S6 #1
step_pin: PE11
dir_pin: PE10
enable_pin: !PE9
# 20t Pulley, 2mm Pitch on a 0.9deg Motor
rotation_distance: 40
microsteps: 16
full_steps_per_rotation: 400
# connected to virtual endstop
endstop_pin: tmc2209_stepper_x:virtual_endstop 
position_min: 0
position_endstop: 0
position_max: 366
homing_speed: 35.0
homing_retract_dist: 0.0
homing_positive_dir: false
 
[stepper_x1]
# connected to Y Stepper on S6 #1
step_pin: PD8
dir_pin: !PB12
enable_pin: !PD9
# 20t Pulley, 2mm Pitch on a 0.9deg Motor
rotation_distance: 40
microsteps: 16
full_steps_per_rotation: 400
# connected to virtual endstop
endstop_pin: tmc2209_stepper_x1:virtual_endstop 
 

[stepper_y]
# connected to E0 Stepper on S6 #1
step_pin: PD5
dir_pin: PD6
enable_pin: !PD4
# 20t Pulley, 2mm Pitch on a 0.9deg Motor
rotation_distance: 40
microsteps: 16
full_steps_per_rotation: 400
# connected to virtual endstop
endstop_pin: tmc2209_stepper_y:virtual_endstop 
position_min: 0
position_endstop: 0
position_max: 366
homing_speed: 35.0
homing_retract_dist: 0.0
homing_positive_dir: false

[stepper_y1]
# connected to E1 Stepper on S6 #1
step_pin: PE6
dir_pin: !PC13
enable_pin: !PE5
# 20t Pulley, 2mm Pitch on a 0.9deg Motor
rotation_distance: 40
microsteps: 16
full_steps_per_rotation: 400
# connected to virtual endstop
endstop_pin: tmc2209_stepper_y1:virtual_endstop 


[stepper_z]
# connected to X Stepper on S6 #2 (Front Left Stepper, from top)
step_pin: s62:PE11
dir_pin: !s62:PE10
enable_pin: !s62:PE9
# 20t Pulley, 3mm Pitch on a 1.8deg Motor with a 13.7:1 gearbox attached
rotation_distance: 60
microsteps: 16
full_steps_per_rotation: 200
gear_ratio: 137:10
# connected to Z- Endstop on S6 #2
endstop_pin: probe:z_virtual_endstop

position_max: 275
position_min: -3
homing_speed: 10.0
second_homing_speed: 3.0
homing_retract_dist: 5.037 # (0.00136875*16*230)
homing_positive_dir: false
 
[stepper_z1]
# connected to Y Stepper on S6 #2 (Rear Left Stepper, from top)
step_pin: s62:PD8
dir_pin: !s62:PB12
enable_pin: !s62:PD9
# 20t Pulley, 3mm Pitch on a 1.8deg Motor with a 13.7:1 gearbox attached
rotation_distance: 60
microsteps: 16
full_steps_per_rotation: 200
gear_ratio: 137:10
 
[stepper_z2]
# connected to Z Stepper on S6 #2 (Rear Right Stepper, from top)
step_pin: s62:PD14
dir_pin: s62:PD13
enable_pin: !s62:PD15
# 20t Pulley, 3mm Pitch on a 1.8deg Motor with a 13.7:1 gearbox attached
rotation_distance: 60
microsteps: 16
full_steps_per_rotation: 200
gear_ratio: 137:10


#TMC Stepper Driver Settings
[tmc2209 stepper_x]
# connected to X Stepper on S6 #1
uart_pin: PE8
#stealthchop_threshold: 9999
interpolate: True
run_current: 1.1
hold_current: 0.9
sense_resistor: 0.110
# Place a jumper on the two pin header near the endstop for sensorless homing
diag_pin: PB14 #connected to X- Endstop (X Jumper Header)
driver_SGTHRS: 135

[tmc2209 stepper_x1]
# connected to Y Stepper on S6 #1
uart_pin: PC4
#stealthchop_threshold: 9999
interpolate: True
run_current: 1.1
hold_current: 0.9
sense_resistor: 0.110
# Place a jumper on the two pin header near the endstop for sensorless homing
diag_pin: PB13 #connected to Y- Endstop (Y Jumper Header)
driver_SGTHRS: 135

[tmc2209 stepper_y]
# connected to E0 Stepper on S6 #1
uart_pin: PA15
#stealthchop_threshold: 9999
interpolate: True
run_current: 1.1
hold_current: 0.9
sense_resistor: 0.110
# Place a jumper on the two pin header near the endstop for sensorless homing
diag_pin: PA3 #connected to Z+ Endstop (E0 Jumper Header)
driver_SGTHRS: 135

[tmc2209 stepper_y1]
# connected to E1 Stepper on S6 #1
uart_pin: PC5
#stealthchop_threshold: 9999
interpolate: True
run_current: 1.1
hold_current: 0.9
sense_resistor: 0.110
# Place a jumper on the two pin header near the endstop for sensorless homing
diag_pin: PA2 #connected to Y+ Endstop (E1 Jumper Header)
driver_SGTHRS: 135

[tmc2209 stepper_z]
# connected to X Stepper on S6 #2 (Front Left Stepper, from top)
uart_pin: s62:PE8
interpolate: False
run_current: 1.1
sense_resistor: 0.110

[tmc2209 stepper_z1]
# connected to Y Stepper on S6 #2 (Rear Left Stepper, from top)
uart_pin: s62:PC4
interpolate: False
run_current: 1.1
sense_resistor: 0.110

[tmc2209 stepper_z2]
# connected to Z Stepper on S6 #2 (Center Right Stepper, from top)
uart_pin: s62:PD12
interpolate: False
run_current: 1.1
sense_resistor: 0.110

[tmc2209 extruder]
# connected to E1 Stepper on S6 #2 
uart_pin: s62:PC5
interpolate: True
run_current: 0.31
sense_resistor: 0.110


# Force Move
#	used to force a single stepper to move.  not used once setup
[force_move]
enable_force_move: true

# Enable Pause/Resume Functionality
[pause_resume]

# Filament Switch Sensor.  
#	support for filament insert and runout detection using a switch sensor, such as an endstop switch.
; [filament_switch_sensor my_sensor]
; pause_on_runout: True
; runout_gcode:
; 	M117 Runout Detected
; 	M600
; 	M400
; event_delay: 3.0
; pause_delay: 0.5
; # connected to Z- Endstop on S6 #1
; switch_pin: !PA0


# Probe
[probe]
# connected to Z- Endstop on S6 #2
pin: ^s62:PA0
x_offset: -16.03 # offset for microswitch x direction off nozzle
y_offset: 12.58 # offset for microswitch y direction off nozzle
z_offset: 7.0956 # offset for microswitch in z height (0.00136875*16*324) - 3DXTech ASA - Ideamaker
#z_offset: 7.1832 # offset for microswitch in z height (0.00136875*16*328) - 3DXTech PC - Ideamaker
samples: 1
sample_retract_dist: 5.0151 # (0.00136875*16*29)
samples_result: average
samples_tolerance: 0.040
samples_tolerance_retries: 3
speed: 3
lift_speed: 30
activate_gcode:
deactivate_gcode:

# Extruder0
[extruder] 
# connected to E1 Stepper on S6 #2 
step_pin: s62:PE6
dir_pin: !s62:PC13
enable_pin: !s62:PE5
# Sherpa Mini 9:50 Ratio - BMG 1.75mm Drive Gear with a 1.8deg Motor
#rotation_distance: 4.101
# Sherpa Mini 10:50 Ratio - BMG 1.75mm Drive Gear with a 1.8deg Motor
rotation_distance: 4.553
microsteps: 16
full_steps_per_rotation: 200

#0.4mm Nozzle
nozzle_diameter: 0.400
pressure_advance: 0.03
pressure_advance_smooth_time: 0.040
filament_diameter: 1.750	
max_extrude_only_distance: 1400.0
max_extrude_only_velocity: 75.0
max_extrude_only_accel: 1500
max_extrude_cross_section: 20000.0

# connected to Heater0 on S6 #1
heater_pin: PB3
max_power: 1.0

# connected to Thermistor0 on S6 #1
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC0
smooth_time: 3.0

#0.4mm Nozzle Settings
smooth_time: 3.0
max_power: 1.0
control: pid
pid_Kp: 27.995
pid_Ki: 1.403
pid_Kd: 139.625
min_extrude_temp: 0
min_temp: 0
max_temp: 325

[verify_heater extruder]
hysteresis: 10
check_gain_time: 40
heating_gain: 2
max_error: 500
 
 
# Heated Bed  
[heater_bed]
# connected to Heater0 on S6 #2
heater_pin: s62:PB3
# NTC 100K MGB18-104F39050L32 is for Kenovo thermistors
sensor_type: NTC 100K MGB18-104F39050L32
# connected to Thermistor0 on S6 #2
sensor_pin: s62:PC0
smooth_time: 3.0

#350mm Build Plate Settings
max_power: 0.60
control: pid
pid_Kp: 42.475 
pid_Ki: 1.395 
pid_Kd: 323.339

min_temp: 0
max_temp: 130

[verify_heater heater_bed]
hysteresis: 2.5
check_gain_time: 240

 
# Fans  
#	thermally controlled hotend fan
[heater_fan my_nozzle_fan]
# connected to Fan0 on S6 #1 - 12v Fan
pin: PB0
max_power: 1.0
kick_start_time: 0.500
heater: extruder
heater_temp: 75.0
fan_speed: 1.00
 
# print cooling fan
[fan]
# connected to Fan1 on S6 #1 - 12v Fan
pin: PB1
max_power: 1.0
kick_start_time: 0.500
  
#	thermally controlled electronics bay fan
[heater_fan electronics_fan_1]
# connected to Fan0 on S6 #2 - 24v Fan
pin: s62:PB0
max_power: 1.0
kick_start_time: 0.500
heater: heater_bed
heater_temp: 50.0
fan_speed: 1.00

#	thermally controlled electronics bay fan
[heater_fan electronics_fan_2]
# connected to Fan1 on S6 #2 - 24v Fan
pin: s62:PB1
max_power: 1.0
kick_start_time: 0.500
heater: heater_bed
heater_temp: 50.0
fan_speed: 1.00


# Chamber Lighting
[output_pin chamber_lighting]
# connected to Heater1 on S6 #2
pin: s62:PB4
value: 0
shutdown_value: 0

# Chamber Temperature
#[temperature_sensor chamber_temp]
#sensor_type: NTC 100K beta 3950
# connected to Thermistor3 on Duex
#sensor_pin: PC29
#gcode_id: C


# Mesh Bed Settings
[bed_mesh]
speed: 300
horizontal_move_z: 20
mesh_min: 25,25
mesh_max: 325,325
probe_count: 5,5
fade_start: 1
fade_end: 0
split_delta_z: .010
move_check_distance: 5.0
mesh_pps: 2,2
algorithm: bicubic
bicubic_tension: 0.10
#relative_reference_index: 12  # ^^^because were measuring the offset from the nozzle switch to the bed using the center of the bed, the equation to find the location = (probe point count)/2-1

# Z Tilt Bed Adjustment settings
[z_tilt]
z_positions: -121.65,-33.65
			 -121.65,436.35
			 478.35, 217.5
points: 70,30
		70,300
		320,175
speed: 300
horizontal_move_z: 20.0
retries: 8
retry_tolerance: 0.010


# Fysetc Mini 12864Panel v2.1 (with neopixel backlight leds) Configuration 
[display]
lcd_type: uc1701
cs_pin: s62:PC11
a0_pin: s62:PD2
rst_pin: s62:PC10
contrast: 63
encoder_pins: ^s62:PC7, ^s62:PC6
click_pin: ^!s62:PA8
spi_software_miso_pin: s62:PA6
spi_software_mosi_pin: s62:PA7
spi_software_sclk_pin: s62:PA5

[output_pin beeper]
pin: s62:PC9

[neopixel fysetc_mini12864]
pin: s62:PC12
chain_count: 3
color_order: RGB
initial_RED: 0
initial_GREEN: 0.4
initial_BLUE: 0


# Motor and Heater Idle Timeout
[idle_timeout]
gcode:
	#blank so it does nothing to the heaters or motors
timeout: 60


#	Macros
#	macro to level the gantry.  use G32 in the terminal to call
[gcode_macro g32]
gcode:
		Z_TILT_ADJUST	;adjust bed so its square to gantry
	
#	macro to level bed to the gantry
[gcode_macro square_bed_to_machine]
gcode:
		G32	;adjust bed so its square to gantry

#	mesh bed level the machine
[gcode_macro mesh_bed_level_machine]
gcode:
		BED_MESH_CALIBRATE	;Run Bed Mesh

#	combined print start gcode macro that takes into account temperature from the slicer
[gcode_macro print_start]
default_parameter_EXTRUDER: 260
default_parameter_BED: 110
gcode:
  print_start_1			;print start macro 1
  M140 S{BED}			;set bed temperature and wait
  M109 S{EXTRUDER}		;set hotend temperature and wait
  M190 S{BED}			;set bed temperature and do not wait
  print_start_2			;print start macro 2
  prime_line_regular	;draw prime line in corner of bed
  
#	combined print start gcode macro that takes into account temperature from the slicer
[gcode_macro print_start_kiss]
default_parameter_EXTRUDER: 260
default_parameter_BED: 110
gcode:
  print_start_1				;print start macro 1
  M140 S{BED}				;set bed temperature and wait
  M109 S{EXTRUDER}			;set hotend temperature and wait
  M190 S{BED}				;set bed temperature and do not wait
  print_start_2				;print start macro 2
  prime_line_kiss			;draw prime line in corner of bed

[gcode_macro print_start_1]
gcode:
	M104 S0 #cancel set temp
	M107 #turn cooling fans off
	G21  # set units to mm
	G90  # use absolute coordinates
	T0  # select tool 0
	M83	# use relative extrusion
	G92 E0.0  # reset e count
	M220 S100 # reset speed multiplier
	nozzle_brush_location	#move to nozzle scrubber bucket

[gcode_macro print_start_2]
gcode:
	nozzle_clean		#clean nozzle	
	
[gcode_macro prime_line_regular]
gcode:
	G1 Z20 F6000
	G1 X20 Y10 F12000
	G1 Z0.5
	G1 X65 E10 F1000
	G1 X75 E2.5 F1000
	G92 E0.0             ;set extruder to Zero
	
[gcode_macro prime_line_kiss]
gcode:
	G1 Z20 F6000
	G1 X20 Y10 F12000
	G1 Z0.5
	G1 X65 E10 F1000
	G1 X75 E2.5 F1000
	G1 E-0.4 F1800
	G1 X85 Y60 Z4 F3000
	G92 E0.0             ;set extruder to Zero
	
#    Use print_end for you slicer ending script    
[gcode_macro print_end]
gcode:
	G91  							#relative positioning
	G0 E-0.3 F4800  				#retract 5mm of filament
	G0 Z+1.00 X-2 Y-2 F6000  		#short quick move to disengage from print
	G0 Z+5.00  F6000  				#move Z-Axis 1mm away from part

	G90  					#absolute positioning
	G0 X30 Y30 				#move gantry close to xy min, by nozzle switch in front
	G91  					#relative positioning
	G0 E10 F1200			#extrude filament to get better blob on end
	G0 E-0.30 F1800  		#retract additional filament to move out of melt zone
	G90 					#absolute positioning

	M104 S0  				#turn off hotend
	#M140 S0  				#turn off heatbed

	#z bed placement control for end of print
    SAVE_GCODE_STATE NAME=END_state
    {% if printer.toolhead.position.z|float == printer.configfile.config["stepper_z"]["position_max"]|float %} #if z position = z max do the following
        # do nothing
    {% elif printer.toolhead.position.z|float >= 130|float %}    #if z position >= 130mnm do the following
        G91              #relative positioning
        G1 Z+10 F600     #move z down 10mm
        G90              #absolute positioning
    {% else %}  		 #if you dont meet any of the criteria
        G90              #absolute positioning
        G1 Z130 F600     #move z to 130mm
    {% endif %}
    RESTORE_GCODE_STATE NAME=END_state

	M106 S0  				#shut off part cooling fans
	#M84					#turn off motors
	clear_pause				#clear pause state encase it was enabled

#	Macro to execute when pausing printer
[gcode_macro print_pause]
gcode:
	PAUSE			#issue pause command
	M83				#relative extruder moves
	G1 E-5 F3600	#retract 5mm of filament
	G91 			#relative positioning
	G1 Z10 F3000 	#lift Z by 10mm
	G90				#absolute positioning

#	Macro to execute when resuming printer
[gcode_macro print_resume]
gcode:
	M83				#relative extruder moves
	G1 E5 F3600	#extrude 5mm of filament
	G91 			#relative positioning
	G1 Z-10 F3000 	#lower Z by 10mm
	G90				#absolute positioning
	RESUME			#move toolhead back to pause position

#	Notify when ABS Timer is complete
[delayed_gcode notify_chamber]
initial_duration: 0
gcode:
 {gcode.action_respond_info("action:prompt_begin Chamber Preheated")}
 {action_respond_info("action:prompt_choice OK")}
 {action_respond_info("action:prompt_show")}

#	Set Temps for chamber warmup when printing with abs 
[gcode_macro abs_warmup_temp]
default_parameter_TEMP: 115
gcode:
		M106 S255					#turn part cooling fan on to blow heat around chamber
		M190 S{TEMP}				#set bed temperature and wait
		G28							#home machine
		G0 X175 Y175 Z20 F3000		#move to center of bed
		UPDATE_DELAYED_GCODE ID=notify_chamber DURATION=1200

#	Notify when filament is unloaded and ready to reload
[delayed_gcode notify_extruder_reload]
initial_duration: 0
gcode:
 {action_respond_info("action:prompt_begin Ready to Load Filament")}
 {action_respond_info("action:prompt_choice OK")}
 {action_respond_info("action:prompt_show")}

#	Macro to Load Filament
[gcode_macro load_filament]
default_parameter_EXTRUDER: 260
gcode:
		turn_fans_off			#turn part cooling fans off
		G0 X10 Y10 F18000		#move to area where can easily load filament
		M109 S{EXTRUDER}		#set hotend temperature and wait
		M83						#relative positioning on extruder	
		G0 E120 F600  			#prime extruder
		M109 S0					#turn off extruder
		UPDATE_DELAYED_GCODE ID=notify_extruder_load DURATION=10

#	Notify when filament is loaded
[delayed_gcode notify_extruder_load]
initial_duration: 0
gcode:
 {action_respond_info("action:prompt_begin FIlament is Loaded")}
 {action_respond_info("action:prompt_choice OK")}
 {action_respond_info("action:prompt_show")}

#	Macro to Unload Filament
[gcode_macro unload_filament]
default_parameter_EXTRUDER: 260
gcode:
		turn_fans_off			#turn part cooling fans off
		G0 X10 Y10 F18000		#move to area where can easily load filament
		M109 S{EXTRUDER}		#set hotend temperature and wait	
		M83						#relative positioning on extruder
		G0 E15 F1800			#extrude filament to get better blob on end
		G0 E-600 F1800  		#retract additional filament to move out of melt zone
		UPDATE_DELAYED_GCODE ID=notify_extruder_reload DURATION=10

#	Scrubs the nozzle on the brass brush located in the build chamber   	
[gcode_macro nozzle_clean]
gcode:
	SAVE_GCODE_STATE NAME=clean_nozzle_state	#store current nozzle location
	nozzle_brush_location		#move to nozzle brush
	G91 						#relative positioning
	G0 Z-27 F3000				#move nozzle to end of brush and into bristles
    {% for n in range(6) %}
		nozzle_clean_path		#run macro for nozzle clean
    {% endfor %}
    G0 Z25 F3000				#move nozzle out of bristles
	G90
	RESTORE_GCODE_STATE NAME=clean_nozzle_state MOVE=1	#restore current nozzle location

#	Path that the nozzle cleaning macro will follow to clean nozzle (must be in relative coordinate gcode)  	
[gcode_macro nozzle_clean_path]
gcode:
	G0 Y+60 F12000				#scrub
	G0 Y-60 F12000				#scrub

#	Where to start the nozzle brush cleaning pattern  	
[gcode_macro nozzle_brush_location]
gcode:
	G0 X0 Y25 Z25.0 F18000			#move to nozzle scrubber

#	Macro for M600 - filament out pause resume 
[gcode_macro M600]
default_parameter_X: 10
default_parameter_Y: 10
default_parameter_Z: 10
gcode:
	{% if printer.toolhead.status == "Ready" %}
		# do nothing
	{% else %}
    	M117 Filament Change
		SAVE_GCODE_STATE NAME=M600_state
    	PAUSE
		G91
		G1 E-5 F4000
		G1 Z{Z}
		G90
		G1 X{X} Y{Y} F3000
		G0 E15 F1800			#extrude filament to get better blob on end
		G0 E-500 F4800  		#retract additional filament to move out of melt zone
		RESTORE_GCODE_STATE NAME=M600_state
	{% endif %}

#	Use this command to load filament during a mid print filament swap	
[gcode_macro SWAP_RESUME] 
gcode:
 	M117 Printing...
	LOAD_FILAMENT
	RESUME

#	Macro to Turn Fans Off
[gcode_macro turn_fans_off]
gcode:
	M107

#	Redefine M204 gcode to properly accel_to_decel when called instead of keeping default through the print
[gcode_macro M204]
rename_existing: M204.1
gcode:

   {% if 'P' in params %}{% set accel = params.P %}{% endif %}
   {% if 'S' in params %}{% set accel = params.S %}{% endif %}
   {% if 'T' in params %}{% set accel = params.T %}{% endif %}

    SET_VELOCITY_LIMIT ACCEL={ accel } ACCEL_TO_DECEL={ accel|float / 2.0}

#	Macro to Babystep Up 0.01mm
[gcode_macro babystep_up3]
gcode:
	SET_GCODE_OFFSET Z_ADJUST=0.01 MOVE=1

#	Macro to Babystep Down 0.01mm
[gcode_macro babystep_down3]
gcode:
	SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1
	
#	Macro to Babystep Up 0.02mm
[gcode_macro babystep_up]
gcode:
	SET_GCODE_OFFSET Z_ADJUST=0.02 MOVE=1

#	Macro to Babystep Down 0.02mm
[gcode_macro babystep_down]
gcode:
	SET_GCODE_OFFSET Z_ADJUST=-0.02 MOVE=1
	
#	Macro to Babystep Up 0.05mm
[gcode_macro babystep_up2]
gcode:
	SET_GCODE_OFFSET Z_ADJUST=0.05 MOVE=1

#	Macro to Babystep Down 0.05mm
[gcode_macro babystep_down2]
gcode:
	SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1
	
#	Macro to Turn Chamber Lighting Off
[gcode_macro chamber_lighting_off]
gcode:
	SET_PIN PIN=chamber_lighting VALUE=0
	
#	Macro to Turn Chamber Lighting On
[gcode_macro chamber_lighting_on]
gcode:
	SET_PIN PIN=chamber_lighting VALUE=1
    


#ANNEX MAGNET PROBE MACROS - DOCKABLE PROBE

#Originally developed by Mental, modified for better use on K-series printers by RyanG and Trails

#########################################################
# User Settings for Annex Magnetic Microswitch Probe
#########################################################
[gcode_macro Homing_Variables]

# if the probe fails to attach or dock 
# perform emergency stop 
variable_estop_probe_failure:   False

# location of the probe when docked.
# this should typically be the coordinates
# where the probe magnets attract themselves
# too the tool and attach.
# The probe offset is automatically added to dock_z 
# in a sometimes futile attempt to prevent crashes
variable_dock_x:                1   # x actual dock location
variable_dock_y:                365 # y actual dock location
variable_dock_z:                20  # what the z will be lowered to, to prevent impact
variable_dock_x_entry:          40  # x entry location for the toolhead to dock the probe, will move in a straight line from this position
variable_dock_y_entry:          326 # y entry location for the toolhead to dock the probe, will move in a straight line from this position
variable_decouple_x:            40  # x where the toolhead moves to when decoupling the probe from the toolhead
variable_decouple_y:            366 # y where the toolhead moves to when decoupling the probe from the toolhead
variable_travel_speed:          300 # how fast all other travel moves will be performed when running these macros
variable_dock_speed:            20  # how fast the toolhead will move when docking the probe, and undocking
variable_decouple_probe_speed:	200 # how fast the toolhead will move to uncouple the probe from the toolhead
variable_z_drop_speed:			20  # how fast the z will lower when moving to the z location to clear the probe

# set the sensorless homing current reduction here (value must be 0-1, 0 = 0%, 1 = 100% available current)
variable_sensorless_homing_x: 1.0 # set for x axis
variable_sensorless_homing_y: 1.0 # set for y axis

# if a separate Z endstop switch is in
# use, specify the coordinates of the switch
# here (Voron). 
# if the Z endstop is mounted
# to the Z axis like on an i3, leave these
# values set to 0
# if the probe is to be used as the Z endstop,
# the Z axis will home off the center of the bed
# and these coordinates are ignored
variable_z_endstop_x:            0
variable_z_endstop_y:            0
   
# if G28 is called and all three axes
# are specified (G28 X0 Y0 Z0 or G28)
# then park the toolhead after homing
variable_park_toolhead:         True

# location to park the toolhead
variable_parkposition_x:        175   
variable_parkposition_y:        175      
variable_parkposition_z:        12   

# run Z axis calibrations and bed mesh
# after homing. If a Z axis calibration
# routine is specified in your config file,
# it will run following homing
# Z axis calibrations include
# z_tilt, quad_gantry_level, and bed_tilt

variable_enable_z_calibration:  False
variable_enable_mesh:           False

# if Z axis is already homed, subsequent
# commands to home the Z axis will not
# re-issue Calibration and Bed Mesh if 
# these are set to false
variable_always_mesh:           False   
variable_always_z_calibrate:    False  


# If you are using any of these calibration
# methods, you will need to uncomment one or
# more of the macros below for overrides to
# function properly
# [gcode_macro QUAD_GANTRY_LEVEL]
# rename_existing:             _QUAD_GANTRY_LEVEL
# gcode:
#     Attach_Probe
#     _QUAD_GANTRY_LEVEL {% for p in params 
#             %}{'%s=%s' % (p, params[p])}{% 
#            endfor %}
#     Dock_Probe
    
[gcode_macro BED_MESH_CALIBRATE]
rename_existing:             _BED_MESH_CALIBRATE
gcode:
    Attach_Probe
    _BED_MESH_CALIBRATE {% for p in params 
           %}{'%s=%s' % (p, params[p])}{% 
          endfor %}
    Dock_Probe

# [gcode_macro BED_TILT_CALIBRATE]
# rename_existing:             _BED_TILT_CALIBRATE
# gcode:
#    Attach_Probe
#    _BED_TILT_CALIBRATE {% for p in params 
#           %}{'%s=%s' % (p, params[p])}{% 
#          endfor %}
#    Dock_Probe

[gcode_macro Z_TILT_ADJUST]
rename_existing:             _Z_TILT_ADJUST
gcode:
   Attach_Probe

   #lock probe to prevent re-attaching before homing z
   SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing_lock_probe VALUE={ True } 
    
   _Z_TILT_ADJUST {% for p in params 
          %}{'%s=%s' % (p, params[p])}{% 
         endfor %}
   G28 Z0
 

#########################################################
# Probaby not a good idea to venture below this line 
# unless you know what you are doing - here be dragons
#########################################################

#enable to SET_KINEMATIC_POSITION for Z hop
[force_move]
enable_force_move:          True


[homing_override]
axes:                             xyz
gcode:   

    #collect homing state variables
    Homing_Variables

    {% set Ht = printer["gcode_macro Homing_Variables"].travel_speed  * 60  %}
    {% set HcX = printer["gcode_macro Homing_Variables"].sensorless_homing_x|float %}
    {% set HcY = printer["gcode_macro Homing_Variables"].sensorless_homing_y|float %}
    
    #reset parameters
    {% set X, Y, Z = False, False, False %}
   
    #sniff gcode parameters for
    #which axes have been requested for homing
    {% if   not 'X' in params
        and not 'Y' in params 
        and not 'Z' in params %}
        
        {% set X, Y, Z = True, True, True %}
 
    {% else %}
        {% if 'X' in params %}
            {% set X = True %}
        {% endif %}
        {% if 'Y' in params %}
            {% set Y = True %}
        {% endif %}
        {% if 'Z' in params %}
            {% set Z = True %}
        {% endif %}      
        {% if 'X' in params
          and 'Y' in params 
          and 'Z' in params %}           
            #reset homing state variables
            #if homing all axes
            Homing_Variables reset=1            
         {% endif %}         
    {% endif %}
 
    {% if X %}
        #lower current for homing if using sensorless homing
        {% if printer['configfile'].config["stepper_x"]["endstop_pin"] == 'tmc2209_stepper_x:virtual_endstop' %}
            SET_TMC_CURRENT STEPPER=stepper_x CURRENT={(printer.configfile.config["tmc2209 stepper_x"]["run_current"]|float)*HcX} HOLDCURRENT={(printer.configfile.config["tmc2209 stepper_x"]["hold_current"]|float)*HcX}
            SET_TMC_CURRENT STEPPER=stepper_x1 CURRENT={(printer.configfile.config["tmc2209 stepper_x1"]["run_current"]|float)*HcX} HOLDCURRENT={(printer.configfile.config["tmc2209 stepper_x1"]["hold_current"]|float)*HcX}
            G28 X0
            SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer.configfile.config["tmc2209 stepper_x"]["run_current"]|float} HOLDCURRENT={printer.configfile.config["tmc2209 stepper_x"]["hold_current"]|float}
            SET_TMC_CURRENT STEPPER=stepper_x1 CURRENT={printer.configfile.config["tmc2209 stepper_x1"]["run_current"]|float} HOLDCURRENT={printer.configfile.config["tmc2209 stepper_x1"]["hold_current"]|float}
        #else home normally
        {% else %}
            G28 X0
        {% endif %}
        #set X axis as homed
        Homing_Variables axis=X  
    {% endif %}
 
    {% if Y %}
        #lower current for homing if using sensorless homing
        {% if printer['configfile'].config["stepper_y"]["endstop_pin"] == 'tmc2209_stepper_y:virtual_endstop' %}
            SET_TMC_CURRENT STEPPER=stepper_y CURRENT={(printer.configfile.config["tmc2209 stepper_y"]["run_current"]|float)*HcY} HOLDCURRENT={(printer.configfile.config["tmc2209 stepper_y"]["hold_current"]|float)*HcY}
            SET_TMC_CURRENT STEPPER=stepper_y1 CURRENT={(printer.configfile.config["tmc2209 stepper_y1"]["run_current"]|float)*HcY} HOLDCURRENT={(printer.configfile.config["tmc2209 stepper_y1"]["hold_current"]|float)*HcY}
            G28 Y0
            SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer.configfile.config["tmc2209 stepper_y"]["run_current"]|float} HOLDCURRENT={printer.configfile.config["tmc2209 stepper_y"]["hold_current"]|float}
            SET_TMC_CURRENT STEPPER=stepper_y1 CURRENT={printer.configfile.config["tmc2209 stepper_y1"]["run_current"]|float} HOLDCURRENT={printer.configfile.config["tmc2209 stepper_y1"]["hold_current"]|float}
        #else home normally
        {% else %}
            G28 Y0
        {% endif %}
        #set Y axis as homed
        Homing_Variables axis=Y  
    {% endif %}
    
    {% if Z %}
        #check if there is already a G28 Z running that has not completed yet
        {% set outermost_z_home_call = not(printer["gcode_macro Homing_Variables"].z_home_running) %}
        {% if outermost_z_home_call %}
            SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=z_home_running VALUE={ True }
        {% endif %}

        #if probe is configured as endstop, attach it
        {% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
            Attach_Probe
        {% endif %}

        #lock probe to prevent repeated docking and re-attaching
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing_lock_probe VALUE={ True } 
       
        Homing_ZHome

        #Verify probe is still attached before
        Homing_SetProbeState action=query

        #set Z axis as homed
        Homing_Variables axis=Z  

        #perform additional calibration on Z axis
        Homing_ZCalibrate

        #set Z axis as calibrated
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing_calibration_state VALUE=True 

        #if this is the outermost call to G28 Z, note that there is no longer a running Z home, and dock probe if necessary
        {% if outermost_z_home_call %}
            SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=z_home_running VALUE={ False }
            #if probe is configured as endstop, dock it
            {% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}            
                SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing_lock_probe VALUE={ False } 
                Dock_Probe
            {% endif %}
        {% endif %}

    {% endif %}

    #park the toolhead
    Homing_ParkTool


#this macro stores all the homing states and resets them
[gcode_macro Homing_Variables]
variable_homing_x:                  False      
variable_homing_y:                  False      
variable_homing_z:                  False
variable_homing_calibration_state:  False 
variable_homing_error:              False 
variable_homing_lock_probe:         False
variable_z_home_running:            False 
variable_probing_speed_z:           0
variable_dock_safe_offset_x:        0
variable_dock_safe_offset_y:        0
variable_default_probe_x:           0
variable_default_probe_y:           0
variable_z_safe_x:                  0
variable_z_safe_y:                  0
variable_z_safe_z:                  0
variable_probe_attached:            False
default_parameter_axis:     
default_parameter_reset:            0
default_parameter_error:            0
gcode:

    Homing_CheckProbe action=query

    {% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
    {% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
    {% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
    {% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}
    {% set Dy = printer["gcode_macro Homing_Variables"].dock_y|float %}
    {% set Dz = printer["gcode_macro Homing_Variables"].dock_z|float %}
    {% set Hx = printer["gcode_macro Homing_Variables"].z_endstop_x|float %}
    {% set Hy = printer["gcode_macro Homing_Variables"].z_endstop_y|float %}
    {% set R  = params.RESET %}

    #get homing speed from config section
    SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=probing_speed_z VALUE={ 
        60 * printer['configfile'].config["probe"]["speed"]|float }

    {% if Hx != 0 or Hy != 0 %}
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=z_safe_x VALUE={ Hx }
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=z_safe_y VALUE={ Hy }
    {% else %}
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=z_safe_x VALUE={ (Mx * 0.5) - Ox }
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=z_safe_y VALUE={ (My * 0.5) - Oy }
    {% endif %}

    SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=default_probe_x VALUE={ (Mx * 0.5) - Ox }
    SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=default_probe_y VALUE={ (My * 0.5) - Oy }
    SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=z_safe_z VALUE={  Dz + Oz }

    #determine best direction to extract probe.
    #if the probe dock is somewhere on the left, move to the right.
    #if the probe dock is somewhere on the right, move to the left
    {%if Dy > My / 2.0 %}
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=dock_safe_offset_y VALUE={ Dy - 40 }
    {% else %}
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=dock_safe_offset_y VALUE={ Dy + 40 }
    {% endif %}

    #report error and reset homing state
    {% if E %}
        {% set R = true %}
        { action_respond_error("Homing Error!") } 
        M84        
    {% else %}

        #if called with an axis in the parameters, set the axis to "true" 
        #otherwise, reset homing state
        {% if 'AXIS' in params %}
            SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing_{ AXIS.lower() } VALUE=True
        {% endif %}

   {% endif %}

   {% if R %}
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing_x     VALUE=False
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing_y     VALUE=False
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing_z     VALUE=False
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing_error VALUE=False
   {% endif %}


[gcode_macro Attach_Probe]
gcode:
    {% set E  = printer["gcode_macro Homing_Variables"].homing_error      %}
    {% set L  = printer["gcode_macro Homing_Variables"].homing_lock_probe %}  
    {% set Dx = printer["gcode_macro Homing_Variables"].dock_x|float      %}  
    {% set Dy = printer["gcode_macro Homing_Variables"].dock_y|float      %}
    {% set Cx = printer["gcode_macro Homing_Variables"].homing_x          %}
    {% set Cy = printer["gcode_macro Homing_Variables"].homing_y          %}    
    {% set Dz = printer["gcode_macro Homing_Variables"].z_safe_z|float    %}
    {% set Sd = printer["gcode_macro Homing_Variables"].dock_speed * 60   %}
    {% set Sp = printer["gcode_macro Homing_Variables"].probing_speed_z   %}
	{% set Sz = printer["gcode_macro Homing_Variables"].z_drop_speed * 60 %}
    {% set St = printer["gcode_macro Homing_Variables"].travel_speed * 60 %}

    {% if not (Cy and Cx) %}
        { action_raise_error("Must Home X and Y Axis First!") }

    #bypass if probe is already attached and no error state
    {% elif not E and not L %}

        { action_respond_info("Attaching Probe") }
        G90

        #if Z appears to be too low to extract the probe, raise it up
        {% if not 'z' in printer.toolhead.homed_axes %}
            SET_KINEMATIC_POSITION Z=0
        {% endif %}  

        {% if printer.toolhead.position.z < Dz %}
            G1 Z{Dz} F{Sz}
        {% endif %}    

        #run Do_Attach Macro (below:)
        Do_Attach

        #check to see if probe is attached
        Homing_CheckProbe action=attach 

    {% endif %} 

[gcode_macro Do_Attach]
gcode:
        {% set Dx = printer["gcode_macro Homing_Variables"].dock_x|float %}
        {% set Dy = printer["gcode_macro Homing_Variables"].dock_y|float %}
        {% set Dxe  = printer["gcode_macro Homing_Variables"].dock_x_entry|float %}
        {% set Dye  = printer["gcode_macro Homing_Variables"].dock_y_entry|float %}
        {% set St = printer["gcode_macro Homing_Variables"].travel_speed * 60 %}
        {% set Sd = printer["gcode_macro Homing_Variables"].dock_speed * 60 %}
        {% set Sp = printer["gcode_macro Homing_Variables"].probing_speed_z %}
        {% set Dz = printer["gcode_macro Homing_Variables"].z_safe_z|float %}
        {% set Px = printer["gcode_macro Homing_Variables"].default_probe_x %}
        {% set Py = printer["gcode_macro Homing_Variables"].default_probe_y %}
	    {% set Sz = printer["gcode_macro Homing_Variables"].z_drop_speed * 60 %}

        #extract from dock
        G1 X{Dxe} Y{Dye} F{St}
        G1 X{Dx} Y{Dy}  F{Sd}
        G1 X{Dxe} Y{Dye} F{St}
        G1 Z{Dz} F{Sz}
        G1 X{Px} Y{Py} F{St} 


[gcode_macro Dock_Probe]
gcode:
    {% set Sd = printer["gcode_macro Homing_Variables"].dock_speed * 60 %}
    {% set St = printer["gcode_macro Homing_Variables"].travel_speed  * 60  %}
    {% set Sp = printer["gcode_macro Homing_Variables"].probing_speed_z  * 60 %}
    {% set Dx  = printer["gcode_macro Homing_Variables"].dock_x|float %}
    {% set Dy  = printer["gcode_macro Homing_Variables"].dock_y|float %}
    {% set Dxe  = printer["gcode_macro Homing_Variables"].dock_x_entry|float %}
    {% set Dye  = printer["gcode_macro Homing_Variables"].dock_y_entry|float %}
    {% set Dxd  = printer["gcode_macro Homing_Variables"].decouple_x|float %}
    {% set Dyd  = printer["gcode_macro Homing_Variables"].decouple_y|float %}
    {% set Dsx = printer["gcode_macro Homing_Variables"].dock_safe_offset_x %}
    {% set Dsy = printer["gcode_macro Homing_Variables"].dock_safe_offset_y %}
    {% set Dz  = printer["gcode_macro Homing_Variables"].z_safe_z|float %}
    {% set E   = printer["gcode_macro Homing_Variables"].homing_error %}
    {% set L   = printer["gcode_macro Homing_Variables"].homing_lock_probe %}
    {% set Sus = printer["gcode_macro Homing_Variables"].decouple_probe_speed * 60 %}
	{% set Sz = printer["gcode_macro Homing_Variables"].z_drop_speed * 60 %}
    
    #bypass if probe needs to stay attached and no error state
    {% if not E and not L %}

        { action_respond_info("Docking Probe") }
        G90

        #if Z appears to be too low to extract the probe, raise it up
        {% if printer.toolhead.position.z < Dz %}
            G1 Z{Dz} F{Sz}
        {% endif %}  

        #insert into dock
        G1 X{Dxe} Y{Dye} F{St}
        G1 X{Dx} Y{Dy} F{Sd}
        G1 X{Dxd} Y{Dyd} F{Sus}
        G1 X{Dxe} Y{Dye} F{St}

        #check to see if probe docked
        Homing_CheckProbe action=dock 

    {% endif %} 

#check to see if probe is where it is supposed to be after
#attaching/docking maneuver and set homing error or shutdown
[gcode_macro Homing_CheckProbe]
variable_probe_state:           0
default_parameter_action:       
gcode:
    Query_Probe
    Homing_SetProbeState action={ ACTION }

#due to how templates are evaluated, we have query endstops in one
#macro and call another macro to make decisions based on the result
[gcode_macro Homing_SetProbeState]
default_parameter_action:        
gcode:
    {% set P = not printer.probe.last_query %}
    {% set E = printer["gcode_macro Homing_Variables"].estop_probe_failure %}
    SET_GCODE_VARIABLE MACRO=Homing_CheckProbe VARIABLE=probe_state VALUE={ P }

    {% if params.ACTION == 'query' %}
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=probe_attached VALUE={ not P}    
    {% endif %}

    #if probe fails to attach/detach
    {% if (P and params.ACTION == 'dock') %}
        {% if E %}
            { action_emergency_stop("Probe dock failed!") }
        {% else %}
            { action_raise_error("Probe dock failed!") }
            SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing_error VALUE=True
        {% endif %}
    {% endif %}

    {% if not P and params.ACTION == 'attach' %}

        {% if E %}
            { action_emergency_stop("Probe attach failed!") }
        {% else %}
            { action_raise_error("Probe attach failed!") }
            SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing_error VALUE=True
        {% endif %}
    {% endif %}
    

[gcode_macro Homing_ZHome]
gcode:
    {% set E  = printer["gcode_macro Homing_Variables"].homing_error         %}
    {% set Hx = printer["gcode_macro Homing_Variables"].z_safe_x             %}
    {% set Hy = printer["gcode_macro Homing_Variables"].z_safe_y             %}
    {% set Cx = printer["gcode_macro Homing_Variables"].homing_x             %}
    {% set Cy = printer["gcode_macro Homing_Variables"].homing_y             %}
    {% set St = printer["gcode_macro Homing_Variables"].travel_speed * 60    %}
    {% set Sp = printer["gcode_macro Homing_Variables"].probing_speed_z * 60 %}
    {% set Dz = printer["gcode_macro Homing_Variables"].z_safe_z|float       %}
	{% set Sz = printer["gcode_macro Homing_Variables"].z_drop_speed * 60 %}

    {% if not E %}
        #if X and Y are not homed raise error
        {% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' 
           and not (Cx and Cy) %}
            
            { action_raise_error("X and Y not homed!") }   
            SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing_error VALUE=True    
        
        {% else %}              
    
            #move tool to safe homing position and home Z axis
            G1 X{Hx} Y{Hy} F{St}
            G28 Z0
            G1 Z{Dz} F{Sz}
        
        {% endif %}          
    {% endif %}

[gcode_macro Homing_ZCalibrate]
gcode:

    {% set E  = printer["gcode_macro Homing_Variables"].homing_error %}
    {% set S  = printer["gcode_macro Homing_Variables"].homing_calibration_state %}
    {% set C  = printer["gcode_macro Homing_Variables"].enable_z_calibration %}
    {% set M  = printer["gcode_macro Homing_Variables"].enable_mesh %}
    {% set Ca = printer["gcode_macro Homing_Variables"].always_z_calibrate %}
    {% set Ma = printer["gcode_macro Homing_Variables"].always_mesh %}
    {% set P  = printer["gcode_macro Homing_Variables"].probe_attached %}

    Attach_Probe

    {% if not S or Ca %}
        {% if C %}

            {% if 'z_tilt' in printer['configfile'].config %}
                _Z_TILT_ADJUST
            {% endif %}

            {% if 'quad_gantry_level' in printer['configfile'].config %}
                _QUAD_GANTRY_LEVEL
            {% endif %}

            {% if 'bed_tilt' in printer['configfile'].config %}
                _BED_TILT_CALIBRATE
            {% endif %}   

            #home Z axis again
            Homing_ZHome

        {% endif %}
    {% endif %}

    {% if not S or Ma%}
        {% if M %}
            _BED_MESH_CALIBRATE

            #home Z axis again
            Homing_ZHome
        {% endif %}
    {% endif %}

    Dock_Probe

[gcode_macro PROBE_CALIBRATE]
rename_existing:             _PROBE_CALIBRATE
gcode:
	Attach_Probe
    { action_respond_info("Please manually detach probe before calibrating") }   
    _PROBE_CALIBRATE {% for p in params 
            %}{'%s=%s' % (p, params[p])}{% 
           endfor %}
	SAVE_GCODE_STATE NAME=original_nozzle_location	#store current nozzle location
    Dock_Probe
    RESTORE_GCODE_STATE NAME=original_nozzle_location MOVE=1	#restore current nozzle location

[gcode_macro PROBE_ACCURACY]
rename_existing:             _PROBE_ACCURACY
gcode:
	SAVE_GCODE_STATE NAME=original_nozzle_location	#store current nozzle location
    Attach_Probe
    _PROBE_ACCURACY {% for p in params 
            %}{'%s=%s' % (p, params[p])}{% 
           endfor %}
    Dock_Probe
    RESTORE_GCODE_STATE NAME=original_nozzle_location MOVE=1	#restore current nozzle location

#override M84 to reset homing state if motors are disabled.
[gcode_macro M84]
rename_existing:             M84.1
gcode:
    Homing_Variables reset=1
    M84.1
   
#override M18 to reset homing state if motors are disabled.
[gcode_macro M18]
rename_existing:             M18.1
gcode:
    Homing_Variables reset=1
    M18.1


[gcode_macro Homing_ParkTool]
gcode:
    {% set P  = printer["gcode_macro Homing_Variables"].park_toolhead      %}
    {% set X  = printer["gcode_macro Homing_Variables"].homing_x           %}
    {% set Y  = printer["gcode_macro Homing_Variables"].homing_y           %}
    {% set Z  = printer["gcode_macro Homing_Variables"].homing_z           %}
    {% set pX = printer["gcode_macro Homing_Variables"].parkposition_x     %}
    {% set pY = printer["gcode_macro Homing_Variables"].parkposition_y     %}
    {% set pZ = printer["gcode_macro Homing_Variables"].parkposition_z     %}
    {% set St = printer["gcode_macro Homing_Variables"].travel_speed * 60  %}
    {% set E  = printer["gcode_macro Homing_Variables"].homing_error       %}

    G90
    {% if not E and X and Y and Z and P %}       
        { action_respond_info("Parking Tool") }
        G1 X{pX} Y{pY} Z{pZ} F{St}
    {% endif %}